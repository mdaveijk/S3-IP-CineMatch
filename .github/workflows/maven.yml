# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven
name: Main
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
      # Use docker.io for Docker Hub if empty
      # Use ghcr.io for GitHub packages
      REGISTRY: docker.io
      # github.repository as <account>/<repo>
      IMAGE_NAME_PREFIX: mdaveijk/S3-IP-Cinematch-

jobs:
  build:
    strategy:
      matrix:
        service: [user-data-service, user-preferences-service, user-matching-service, discovery-server, api-gateway]
  
  
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'temurin'
    - name: Cache SonarCloud packages
      uses: actions/cache@v3
      with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar 
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
    - name: Build and analyze
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: mvn -B verify --file ${{ matrix.service }}/pom.xml org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=cinematch_${{ matrix.service }}
    - name: Build ${{ matrix.service }} with Maven
      run: mvn -B package --file ${{ matrix.service }}/pom.xml
    - name: Upload ${{ matrix.service }} jar
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.service }}
        path: ./${{ matrix.service }}/target/*.jar
        retention-days: 1
  publish: 
    strategy:
      matrix:
        service: [user-data-service, user-preferences-service, user-matching-service, discovery-server, api-gateway]
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Download ${{ matrix.service }} artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.service }}
          path: ./${{ matrix.service }}

      # Login against a Docker registry except
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      # Build and push Docker image with Buildx
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v3
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
